<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE hibernate-configuration PUBLIC
		"-//Hibernate/Hibernate Configuration DTD 3.0//EN"
		"http://www.hibernate.org/dtd/hibernate-configuration-3.0.dtd">
<hibernate-configuration>
    <session-factory>
        <!--指定数据库的名称-->
        <property name="connection.username">root</property>
        <!--指定数据库的密码-->
        <property name="connection.password">qpy1995511</property>
        <!--指定JDBC驱动-->
        <property name="connection.driver_class">com.mysql.jdbc.Driver</property>
        <!--访问数据库的地址-->
        <property name="connection.url">jdbc:mysql://localhost:3306:Hibernate</property>
        <!--指定Mysql具体方言-->
        <property name="dialect">org.hibernate.dialect.MySQLDialect</property>

        <!--是否把Hibernate运行时的SQL语句输出到控制套,编码阶段便于测试-->
        <property name="show_sql">true</property>
        <!--输出到控制台的SQL语句是否进行排版,便于阅读.建议设置为true-->
        <property name="format_sql">true</property>
        <!--可以帮助由Java代码生成的数据库脚本,进而生成具体的表结构。creat|update|create-drop|validate-->
        <!-- create指删除原有表，然后重建该表 -->
        <!-- update在原有表上更新，不会删除前面测试所插入的数据 -->
        <!-- create-drop表示先创建后删除 -->
        <!-- validate对原有表结构进行验证，如果现在的表结构与原有表结构不同,则不会创建 -->
        <property name="hbm2ddl.auto">update</property>
        <!--默认的数据库，会给表之前添加Hibernate前缀-->
        <property name="hibernate.default_schema">Hibernate</property>
        <!--配置Hibernate数据库方言,Hibernate可正对特殊的数据库进行优化-->
        <property name="hibernate.dialect">org.hibernate.dialect.MySQLDialect</property>

        <mapping class="com.discardpast.chapter_one.persistence.Student"/>
        <mapping resource="Student.hbm.xml"/>

    </session-factory>
</hibernate-configuration>
